{"version":3,"sources":["components/Layout/logo.png","components/Loading/loading.png","store/index.js","store/error.js","store/loading.js","store/events.js","store/setup.js","components/Layout/Error.js","components/Layout/Header.js","components/Layout/Layout.js","components/Layout/index.js","components/EventList/Event.js","components/EventList/EventList.js","components/EventList/index.js","api/index.js","components/Loading/index.js","components/TextInput/index.js","components/SignInForm/SignInForm.js","components/SignInForm/index.js","components/Container/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","history","setError","text","type","payload","defaultState","Immutable","Map","undefined","reducer","state","action","setLoading","displayText","isLoading","mapEvents","events","reduce","acc","curr","set","id","List","merge","selectedEvent","initialState","basename","document","getElementsByTagName","getAttribute","createBrowserHistory","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","combineReducers","error","loading","setup","router","connectRouter","applyMiddleware","routerMiddleware","thunkMiddleware","Error","Header","eventTitle","src","logo","alt","className","defaultProps","Layout","errorText","children","connect","selectedEventId","getIn","Event","PropTypes","string","instanceOf","Date","func","title","description","start_time","onClick","dangerouslySetInnerHTML","__html","EventList","this","props","length","loadEvents","onEventClick","map","event","key","React","Component","mapDispatchToProps","dispatch","fetch","process","headers","then","x","json","catch","get","valueSeq","toJS","Loading","loadingImage","requiredValidator","value","TextInput","disabled","field","formState","label","validate","errors","hasError","cssClass","htmlFor","autoComplete","validateOnBlur","withFormState","SignInForm","firstInput","querySelector","focus","onSubmit","name","style","display","formValues","console","log","setTimeout","hasEvent","App","store","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0731d68e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ce37af65.png\";","module.exports = __webpack_public_path__ + \"static/media/loading.6020d4a5.png\";","import Immutable from 'immutable';\nimport { createBrowserHistory } from 'history';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { connectRouter, routerMiddleware } from 'connected-react-router/immutable';\nimport thunkMiddleware from 'redux-thunk';\nimport { combineReducers } from 'redux-immutable';\n\nimport error from './error';\nimport events from './events';\nimport loading from './loading';\nimport setup from './setup';\n\nconst initialState = new Immutable.Map();\nconst rootReducer = history => combineReducers({\n  error,\n  events,\n  loading,\n  setup,\n  router: connectRouter(history)\n});\n\nconst basename = document.getElementsByTagName('base')[0].getAttribute('href');\nexport const history = createBrowserHistory({ basename });\n\n// eslint-disable-next-line no-underscore-dangle\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default createStore(rootReducer(history),\n  initialState,\n  composeEnhancers(\n    applyMiddleware(\n      routerMiddleware(history),\n      thunkMiddleware,\n    ),\n  )\n);\n","import Immutable from 'immutable';\n\nconst SET_ERROR = 'error/set';\nexport const setError = (text) => ({\n  type: SET_ERROR,\n  payload: { text },\n});\n\nconst CLEAR_ERROR = 'error/clear';\nexport const clearError = () => ({\n  type: CLEAR_ERROR,\n});\n\nconst defaultState = new Immutable.Map({\n  text: undefined,\n});\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case SET_ERROR:\n      return new Immutable.Map(action.payload);\n    case CLEAR_ERROR:\n      return defaultState;\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import Immutable from 'immutable';\n\nconst SET_LOADING = 'loading/set';\nexport const setLoading = (displayText = 'Loading...') => ({\n  type: SET_LOADING,\n  payload: {\n    displayText,\n    isLoading: true,\n  },\n});\n\nconst CLEAR_LOADING = 'loading/clear';\nexport const clearLoading = () => ({\n  type: CLEAR_LOADING,\n});\n\nconst defaultState = new Immutable.Map({\n  isLoading: false,\n  displayText: undefined,\n});\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case SET_LOADING:\n      return new Immutable.Map(action.payload);\n    case CLEAR_LOADING:\n      return defaultState;\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import Immutable from 'immutable';\nimport * as api from '../api';\nimport { setError } from './error';\nimport { setLoading, clearLoading } from './loading';\n\nconst mapEvents = (events = []) => events.reduce((acc, curr) =>\n  acc.set(curr.id, new Immutable.Map(curr)), new Immutable.Map())\n\nconst SET_EVENTS = 'events/set';\nexport const loadEvents = () => dispatch => {\n  dispatch(setLoading());\n  return api\n    .getEvents()\n    .then(events => {\n      dispatch({\n        type: SET_EVENTS,\n        payload: { events: mapEvents(events) }\n      });\n      dispatch(clearLoading());\n    })\n    .catch(() => {\n      dispatch(setError('Error fetching events.'));\n    });\n};\n\nconst defaultState = new Immutable.List();\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case SET_EVENTS: {\n      return action.payload.events;\n    }\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import Immutable from 'immutable';;\n\nconst SET_EVENT = 'setup/setEvent';\nexport const setEvent = id => ({\n  type: SET_EVENT,\n  payload: id,\n});\n\nconst defaultState = new Immutable.Map();\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case SET_EVENT:\n      return state.merge({\n        selectedEvent: action.payload,\n      });\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import React from 'react';\n\nconst Error = ({ text }) => {\n  if (!text) return null;\n  return <h1>{text}</h1>;\n};\n\nexport default Error;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport logo from './logo.png';\nimport './Header.css';\n\nconst Header = ({ eventTitle }) => (\n  <header>\n    <img src={logo} alt=\"DSA Los Angeles\" />\n    <h1>{eventTitle}</h1>\n    <div className=\"block-off\">&nbsp;</div>\n  </header>\n);\n\nHeader.propTypes = {\n  eventTitle: PropTypes.string,\n};\nHeader.defaultProps = {\n  eventTitle: 'DSA-LA Event Sign In',\n};\n\nexport default Header;\n","import React, { Fragment } from 'react';\nimport Error from './Error';\nimport Header from './Header';\nimport './Layout.css';\n\nconst Layout = ({ eventTitle, errorText, children }) => (\n  <Fragment>\n    <Header eventTitle={eventTitle} />\n    <div className=\"container layout-container\">\n      <Error text={errorText} />\n      {children}\n    </div>\n  </Fragment>\n);\n\nexport default Layout;\n","import { connect } from 'react-redux';\nimport Layout from './Layout';\n\nconst mapStateToProps = (state) => {\n  const selectedEventId = state.getIn(['setup', 'selectedEvent']);\n  const eventTitle = state.getIn(['events', selectedEventId, 'title']);\n  const errorText = state.getIn(['error', 'text']);\n  return { eventTitle, errorText };\n}\n\nexport default connect(mapStateToProps)(Layout);\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport './Event.css';\n\nexport const eventProps = {\n  title: PropTypes.string,\n  start_time: PropTypes.instanceOf(Date),\n  onClick: PropTypes.func,\n};\n\nconst Event = ({ title, description, start_time, onClick }) => (\n  <button className=\"btn btn-outline-info btn-event\" onClick={onClick}>\n    <h3>{title}</h3>\n    <p dangerouslySetInnerHTML={{ __html: description }} />\n    <p>Starts at {start_time}</p>\n  </button>\n);\n\nEvent.propTypes = eventProps;\n\nexport default Event;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Event, { eventProps } from './Event';\n\nclass EventList extends React.Component {\n  componentDidMount() {\n    if (this.props.events && this.props.events.length > 0) {\n      return;\n    }\n    this.props.loadEvents();\n  }\n\n  render() {\n    const { events, onEventClick } = this.props;\n    return (\n      <Fragment>\n        <div className=\"page-header\">\n          <h2>\n            Here are today's events.\n          </h2>\n        </div>\n        <p>\n          Click on your event and attendees can start signing in.\n        </p>\n        {events.map(event =>\n          <Event\n            key={event.id}\n            onClick={() => onEventClick(event.id)}\n            {...event}\n          />\n        )}\n      </Fragment>\n    );\n  };\n}\n\nEventList.propTypes = {\n  events: PropTypes.arrayOf(PropTypes.shape(eventProps)),\n  loadEvents: PropTypes.func,\n  onEventClick: PropTypes.func,\n};\n\nexport default EventList;\n","import { connect } from 'react-redux';\nimport { loadEvents } from '../../store/events';\nimport EventList from './EventList';\nimport { setEvent } from '../../store/setup';\n\nconst mapStateToProps = state => ({\n  events: state.get('events', new Map()).valueSeq().toJS(),\n});\n\nconst mapDispatchToProps = {\n  loadEvents,\n  onEventClick: setEvent\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventList);\n","import * as mocks from './mocks';\n\nconst eventFetchUrl = process.env.REACT_APP_GET_EVENTS_URL;\n\n// Useful for debugging.\nconst useMocks = false;\nexport const getEvents = () => {\n  if (useMocks) {\n    // simulate a network request by taking some time\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(mocks.events);\n      }, 2000);\n    });\n  }\n  return fetch(eventFetchUrl, {\n    headers: {\n      'Accept': 'application/json',\n    }}).then(x => x.json());\n};\n\nexport const saveSignIn = ({\n  firstName,\n  lastName,\n  emailAddress,\n  phoneNumber,\n}) => {\n  alert('Work in progress...')\n  /* todo: save sign in */\n}\n","import React from 'react';\nimport './Loading.css';\nimport loadingImage from './loading.png';\n\nconst Loading = () => (\n  <div className=\"loading-container\">\n    <img src={loadingImage} className=\"loading\" alt=\"Loading...\" />\n  </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, withFormState } from 'informed';\n\nexport const requiredValidator = value => value ? undefined : 'Required.';\n\nconst TextInput = ({ disabled, field, formState, label, validate }) => {\n  const { errors } = formState;\n  const errorText = errors[field];\n  const hasError = typeof errorText !== 'undefined';\n\n  let cssClass = 'form-control form-control-lg';\n  if (hasError) cssClass += ' is-invalid';\n\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={field}>{label}</label>\n      <Text\n        className={cssClass}\n        autoComplete=\"off\"\n        field={field}\n        id={field}\n        validate={validate}\n        disabled={disabled}\n        validateOnBlur\n      />\n      {hasError\n        ? <div className=\"invalid-feedback\">{errorText}</div>\n        : null\n      }\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  disabled: PropTypes.bool,\n  field: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  validate: PropTypes.func,\n};\n\nTextInput.defaultProps = {\n  disabled: false,\n};\n\nexport default withFormState(TextInput);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'informed';\nimport TextInput, { requiredValidator } from '../TextInput';\n\n\nclass SignInForm extends React.Component {\n  componentDidMount() {\n    const firstInput = document.querySelector('input:not([style=\"display: none;\"]').focus();\n    firstInput && firstInput.focus();\n  }\n\n  render() {\n    const { onSubmit } = this.props;\n    return (\n      <div className=\"container\">\n        <Form id=\"signin-form\" onSubmit={onSubmit}>\n          <input autoComplete=\"false\" name=\"hidden\" type=\"text\" style={{ display: 'none' }} />\n          <TextInput\n            field=\"firstName\"\n            label=\"First Name\"\n            validate={requiredValidator}\n          />\n          <TextInput\n            field=\"lastName\"\n            label=\"Last Name\"\n            validate={requiredValidator}\n          />\n          <TextInput\n            field=\"emailAddress\"\n            label=\"Email Address\"\n            validate={requiredValidator}\n          />\n          <TextInput\n            field=\"phoneNumber\"\n            label=\"Phone Number\"\n            validate={requiredValidator}\n          />\n          <div className=\"btn-group\">\n            <button className=\"btn btn-primary\" type=\"submit\">Submit</button>\n          </div>\n          <div className=\"btn-group\">\n            <button className=\"btn btn-light\" type=\"reset\">Reset</button>\n          </div>\n        </Form>\n      </div>\n    );\n  }\n}\n\nSignInForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SignInForm;\n","import { connect } from 'react-redux';\n// import { logSignIn } from '../../store/signin';\nimport { setError } from '../../store/error';\nimport { setLoading, clearLoading } from '../../store/loading';\n\nimport SignInForm from './SignInForm';\n\nconst mapStateToProps = () => ({});\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: (formValues) => {\n    console.log('submitting form values', formValues);\n    dispatch(setLoading());\n    setTimeout(() => {\n      dispatch(clearLoading());\n      dispatch(setError('This is a work in progress and your signin was not saved.'));\n    }, 2000)\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignInForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport EventList from '../EventList';\nimport Loading from '../Loading';\nimport SignInForm from '../SignInForm';\n\nconst Container = ({ hasEvent, isLoading }) => {\n  if (isLoading) return <Loading />;\n  if (hasEvent) return <SignInForm />\n  return <EventList />;\n};\nContainer.propTypes = {\n  hasEvent: PropTypes.bool,\n  isLoading: PropTypes.bool,\n};\n\nconst mapStateToProps = (state) => {\n  const isLoading = state.getIn(['loading', 'isLoading']);\n\n  const event = state.getIn(['setup', 'selectedEvent']);\n  const hasEvent = typeof event !== 'undefined';\n\n  return { hasEvent, isLoading };\n};\n\nexport default connect(mapStateToProps)(Container);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Layout from './components/Layout';\nimport Container from './components/Container';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Layout>\n        <Container />\n      </Layout>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}