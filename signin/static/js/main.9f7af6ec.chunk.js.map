{"version":3,"sources":["components/Layout/logo.png","components/Loading/loading.png","store/error.js","api/index.js","store/loading.js","store/events.js","store/password.js","store/setup.js","store/signin.js","store/index.js","components/Layout/Error.js","components/Layout/Header.js","components/Layout/Layout.js","components/Layout/index.js","components/EventList/Event.js","components/EventList/EventList.js","components/EventList/index.js","components/EventList/index-reports.js","components/Loading/index.js","components/TextInput/index.js","components/Password/Password.js","components/Password/index.js","components/SignInForm/Success.js","components/SignInForm/SignInForm.js","components/SignInForm/index.js","components/Container/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","setError","text","type","payload","defaultState","Immutable","Map","undefined","reducer","state","action","eventsUrl","process","signInsUrl","setLoading","displayText","isLoading","mapEvents","events","reduce","acc","curr","set","id","OrderedMap","merge","upcomingEvents","eventsWithSignIns","showReports","selectedEvent","history","clearSuccess","displaySuccess","initialState","basename","document","getElementsByTagName","getAttribute","createBrowserHistory","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","combineReducers","error","loading","password","setup","signin","router","connectRouter","applyMiddleware","routerMiddleware","thunkMiddleware","Error","className","Header","eventTitle","src","logo","alt","defaultProps","Layout","errorText","children","connect","selectedEventId","getIn","Event","PropTypes","string","func","title","description","start_date","onClick","dangerouslySetInnerHTML","__html","Date","toLocaleString","timeZone","EventList","props","onHelpClicked","setState","showHelp","this","length","onLoad","onEventClick","map","event","key","React","Component","mapDispatchToProps","dispatch","getState","fetch","headers","then","x","json","api","get","catch","valueSeq","toJS","url","eventId","_","response","blob","download","Loading","loadingImage","requiredValidator","value","TextInput","disabled","field","formState","label","validate","errors","hasError","cssClass","htmlFor","autoComplete","validateOnBlur","withFormState","Password","onSubmit","useEffect","firstInput","querySelector","focus","name","style","display","mapDispatch","Success","selfDestruct","useState","remaining","setRemaining","setTimeout","countdown","newRemaining","SignInForm","formValues","values","mapped","firstName","lastName","emailAddress","phoneNumber","method","body","JSON","stringify","hasEvent","hasPassword","shouldShowReports","App","store","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f7af6ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ce37af65.png\";","module.exports = __webpack_public_path__ + \"static/media/loading.6020d4a5.png\";","import Immutable from 'immutable';\n\nconst SET_ERROR = 'error/set';\nexport const setError = (text) => ({\n  type: SET_ERROR,\n  payload: { text },\n});\n\nconst CLEAR_ERROR = 'error/clear';\nexport const clearError = () => ({\n  type: CLEAR_ERROR,\n});\n\nconst defaultState = new Immutable.Map({\n  text: undefined,\n});\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case SET_ERROR:\n      return new Immutable.Map(action.payload);\n    case CLEAR_ERROR:\n      return defaultState;\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import * as mocks from './mocks';\nimport download from 'downloadjs';\n\nconst eventsUrl = process.env.REACT_APP_EVENTS_URL;\nconst signInsUrl = process.env.REACT_APP_SIGNIN_URL;\n\n// Useful for debugging.\nconst useMocks = false;\nexport const getEvents = (password) => {\n  if (useMocks) {\n    // simulate a network request by taking some time\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(mocks.events);\n      }, 2000);\n    });\n  }\n  return fetch(eventsUrl, {\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': password,\n    }}).then(x => x.json());\n};\n\nexport const getEventsWithSignIns = (password) => {\n  const url = `${eventsUrl}?with=signins`;\n  return fetch(url, {\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': password,\n    }}).then(x => x.json());\n};\n\nexport const saveSignIn = (values, password) => {\n  const mapped = {\n    \"event_id\": values.eventId,\n    \"first_name\": values.firstName,\n    \"last_name\": values.lastName,\n    \"email_address\": values.emailAddress,\n    \"phone_number\": values.phoneNumber,\n  };\n  return fetch(signInsUrl, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': password,\n    },\n    body: JSON.stringify(mapped),\n  });\n};\n\nexport const getSignIns = (eventId) => (_, getState) => {\n  const password = getState().get('password');\n  const url = `${signInsUrl}?event_id=${eventId}`;\n  fetch(url, {\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': password,\n    }})\n    .then(response => response.blob())\n    .then(blob => {\n      download(blob, 'attendees.csv', 'text/csv');\n    });\n  return ({ type: 'download' })\n}\n","import Immutable from 'immutable';\n\nconst SET_LOADING = 'loading/set';\nexport const setLoading = (displayText = 'Loading...') => ({\n  type: SET_LOADING,\n  payload: {\n    displayText,\n    isLoading: true,\n  },\n});\n\nconst CLEAR_LOADING = 'loading/clear';\nexport const clearLoading = () => ({\n  type: CLEAR_LOADING,\n});\n\nconst defaultState = new Immutable.Map({\n  isLoading: false,\n  displayText: undefined,\n});\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case SET_LOADING:\n      return new Immutable.Map(action.payload);\n    case CLEAR_LOADING:\n      return defaultState;\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import Immutable from 'immutable';\nimport * as api from '../api';\nimport { setError } from './error';\nimport { setLoading, clearLoading } from './loading';\n\nconst mapEvents = (events = []) => events.reduce((acc, curr) =>\n  acc.set(curr.id, new Immutable.Map(curr)), new Immutable.OrderedMap());\n\nconst SET_EVENTS = 'events/set';\nexport const loadEvents = () => (dispatch, getState) => {\n  dispatch(setLoading());\n  const password = getState().get('password');\n  return api\n    .getEvents(password)\n    .then(events => {\n      dispatch({\n        type: SET_EVENTS,\n        payload: { events: mapEvents(events) }\n      });\n      dispatch(clearLoading());\n    })\n    .catch(() => {\n      // TODO: Something else might be wrong here, but this will be the most common cause.\n      dispatch(setError('Wrong password.  Please refresh and try again.'));\n      dispatch(clearLoading());\n    });\n};\n\nconst SET_EVENTS_WITH_SIGNINS = 'events/set/withSignins'\nexport const loadEventsWithSignins = () => (dispatch, getState) => {\n  dispatch(setLoading());\n  const password = getState().get('password');\n  return api\n    .getEventsWithSignIns(password)\n    .then(events => {\n      dispatch({\n        type: SET_EVENTS_WITH_SIGNINS,\n        payload: { events: mapEvents(events) }\n      });\n      dispatch(clearLoading());\n    })\n    .catch(() => {\n      // TODO: Something else might be wrong here, but this will be the most common cause.\n      dispatch(setError('Wrong password.  Please refresh and try again.'));\n      dispatch(clearLoading());\n    });\n};\n\nconst defaultState = new Immutable.Map();\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case SET_EVENTS: {\n      return state.merge({\n        upcomingEvents: action.payload.events,\n      });\n    }\n    case SET_EVENTS_WITH_SIGNINS: {\n      return state.merge({\n        eventsWithSignIns: action.payload.events,\n      });\n    }\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","const SET_PASSWORD = 'password/set';\nexport const setPassword = ({ password }) => ({\n  type: SET_PASSWORD,\n  payload: password,\n});\n\nconst reducer = (state = \"\", action) => {\n  switch (action.type) {\n    case SET_PASSWORD:\n        return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import Immutable from 'immutable';;\n\nconst SET_EVENT = 'setup/setEvent';\nexport const setEvent = id => ({\n  type: SET_EVENT,\n  payload: id,\n});\n\nconst SET_REPORTS = 'setup/setReports';\nexport const showReports = () => ({\n  type: SET_REPORTS,\n});\n\nconst defaultState = new Immutable.Map({\n  showReports: false,\n});\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case SET_EVENT:\n      return state.merge({\n        selectedEvent: action.payload,\n      });\n    case SET_REPORTS:\n      return state.merge({\n        showReports: true,\n      });\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import Immutable from 'immutable';\nimport * as api from '../api';\nimport { setLoading, clearLoading } from \"./loading\";\nimport { clearError, setError } from './error';\n\nconst SET_SUCCESS = 'signin/success/set';\nconst setSuccess = () => ({\n  type: SET_SUCCESS,\n})\n\nconst CLEAR_SUCCESS = 'signin/success/clear';\nexport const clearSuccess = () => ({\n  type: CLEAR_SUCCESS,\n});\n\nexport const logSignIn = formValues => (dispatch, getState) => {\n  dispatch(clearError());\n  dispatch(clearSuccess());\n  dispatch(setLoading());\n  const eventId = getState().getIn(['setup', 'selectedEvent']);\n  const password = getState().get('password');\n  const toSubmit = {\n    ...formValues,\n    eventId,\n  };\n  return api\n    .saveSignIn(toSubmit, password)\n    .then(() => {\n      dispatch(clearLoading());\n      dispatch(setSuccess());\n    })\n    .catch(() => {\n      dispatch(clearLoading());\n      dispatch(setError('An error occurred.  Please try again.'));\n    });\n};\n\nconst defaultState = new Immutable.Map({\n  displaySuccess: false\n});\nconst reducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case SET_SUCCESS:\n      return state.merge({ displaySuccess: true });\n    case CLEAR_SUCCESS:\n      return state.merge({ displaySuccess: false });\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import Immutable from 'immutable';\nimport { createBrowserHistory } from 'history';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { connectRouter, routerMiddleware } from 'connected-react-router/immutable';\nimport thunkMiddleware from 'redux-thunk';\nimport { combineReducers } from 'redux-immutable';\n\nimport error from './error';\nimport events from './events';\nimport loading from './loading';\nimport password from './password';\nimport setup from './setup';\nimport signin from './signin';\n\nconst initialState = new Immutable.Map();\nconst rootReducer = history => combineReducers({\n  error,\n  events,\n  loading,\n  password,\n  setup,\n  signin,\n  router: connectRouter(history)\n});\n\nconst basename = document.getElementsByTagName('base')[0].getAttribute('href');\nexport const history = createBrowserHistory({ basename });\n\n// eslint-disable-next-line no-underscore-dangle\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default createStore(rootReducer(history),\n  initialState,\n  composeEnhancers(\n    applyMiddleware(\n      routerMiddleware(history),\n      thunkMiddleware,\n    ),\n  )\n);\n","import React from 'react';\nimport './Error.css';\n\nconst Error = ({ text }) => {\n  if (!text) return null;\n  return <h1 className=\"heading-error\">{text}</h1>;\n};\n\nexport default Error;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport logo from './logo.png';\nimport './Header.css';\n\nconst Header = ({ eventTitle }) => (\n  <header>\n    <img src={logo} alt=\"DSA Los Angeles\" />\n    <h1>{eventTitle}</h1>\n    <div className=\"block-off\">&nbsp;</div>\n  </header>\n);\n\nHeader.propTypes = {\n  eventTitle: PropTypes.string,\n};\nHeader.defaultProps = {\n  eventTitle: 'DSA-LA Event Sign In',\n};\n\nexport default Header;\n","import React, { Fragment } from 'react';\nimport Error from './Error';\nimport Header from './Header';\nimport './Layout.css';\n\nconst Layout = ({ eventTitle, errorText, children }) => (\n  <Fragment>\n    <Header eventTitle={eventTitle} />\n    <div className=\"container layout-container\">\n      <Error text={errorText} />\n      {children}\n    </div>\n  </Fragment>\n);\n\nexport default Layout;\n","import { connect } from 'react-redux';\nimport Layout from './Layout';\n\nconst mapStateToProps = (state) => {\n  const selectedEventId = state.getIn(['setup', 'selectedEvent']);\n  const eventTitle = state.getIn(['events', 'upcomingEvents', selectedEventId, 'title']);\n  const errorText = state.getIn(['error', 'text']);\n  return { eventTitle, errorText };\n}\n\nexport default connect(mapStateToProps)(Layout);\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport './Event.css';\n\nexport const eventProps = {\n  title: PropTypes.string,\n  start_date: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nconst getDisplay = input => {\n  const date = new Date(input);\n  const tz = { timeZone: 'UTC' };\n  return date.toLocaleString('en-US', tz);\n  // const datePart = date.toLocaleDateString('en-US');\n  // const timePart = date.toLocaleTimeString('en-US', tz);\n  // return `${datePart} ${timePart}`;\n};\n\nconst Event = ({ title, description, start_date, onClick }) => (\n  <button className=\"btn btn-outline-info btn-event\" onClick={onClick}>\n    <h3>{title}</h3>\n    <p dangerouslySetInnerHTML={{ __html: description }} />\n    <p>Starts at {getDisplay(start_date)}</p>\n  </button>\n);\n\nEvent.propTypes = eventProps;\n\nexport default Event;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Event, { eventProps } from './Event';\n\nclass EventList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showHelp: false };\n  }\n\n  componentDidMount() {\nif (this.props.events && this.props.events.length > 0) {\n      return;\n    }\n    this.props.onLoad();\n  }\n\n  onHelpClicked = () => {\n    this.setState({ showHelp: true });\n  }\n\n  render() {\n    const { events, onEventClick, showReports } = this.props;\n    const { showHelp } = this.state;\n    return (\n      <Fragment>\n        <div className=\"page-header\">\n          <h2>\n            Click your event and attendees can start signing in.\n          </h2>\n        </div>\n\n        {showHelp ? (\n          <p>\n            Events are displayed here if the start time set in Action Network\n            is later than twelve hours ago and earlier than two days from now.\n            This event list syncs with Action Network every five minutes. If\n            you just created or updated your event and it's not here yet, hang\n            tight and it will show up soon. Refresh the page to reload events.\n          </p>\n        ) : (\n          <>\n            <div className=\"big-bottom\">\n              <button\n                className=\"btn btn-danger btn-branded\"\n                onClick={showReports}\n              >\n                Download past attendees instead.\n              </button>\n              <button\n                className=\"btn btn-danger btn-branded\"\n                onClick={this.onHelpClicked}\n              >\n                  Help! My event isn't here!\n              </button>\n            </div>\n          </>\n        )}\n        {events.map(event =>\n          <Event\n            key={event.id}\n            onClick={() => onEventClick(event.id)}\n            {...event}\n          />\n        )}\n      </Fragment>\n    );\n  };\n}\n\nEventList.propTypes = {\n  events: PropTypes.arrayOf(PropTypes.shape(eventProps)),\n  onLoad: PropTypes.func,\n  onEventClick: PropTypes.func,\n  showReports: PropTypes.func,\n};\n\nexport default EventList;\n","import { connect } from 'react-redux';\nimport Immutable from 'immutable';\nimport { loadEvents } from '../../store/events';\nimport EventList from './EventList';\nimport { setEvent, showReports } from '../../store/setup';\n\nconst mapStateToProps = state => ({\n  events: state.getIn(['events', 'upcomingEvents'], new Immutable.Map()).valueSeq().toJS(),\n});\n\nconst mapDispatchToProps = {\n  onLoad: loadEvents,\n  onEventClick: setEvent,\n  showReports: showReports,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventList);\n","import { connect } from 'react-redux';\nimport Immutable from 'immutable';\nimport { loadEventsWithSignins } from '../../store/events';\nimport { getSignIns } from '../../api';\nimport EventList from './EventList';\n\nconst mapStateToProps = state => ({\n  events: state.getIn(['events', 'eventsWithSignIns'], new Immutable.Map()).valueSeq().toJS(),\n});\n\nconst mapDispatchToProps = {\n  onLoad: loadEventsWithSignins,\n  onEventClick: getSignIns,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventList);\n","import React from 'react';\nimport './Loading.css';\nimport loadingImage from './loading.png';\n\nconst Loading = () => (\n  <div className=\"loading-container\">\n    <img src={loadingImage} className=\"loading\" alt=\"Loading...\" />\n  </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Text, withFormState } from 'informed';\n\nexport const requiredValidator = value => value ? undefined : 'Required.';\n\nconst TextInput = ({ disabled, field, formState, label, validate }) => {\n  const { errors } = formState;\n  const errorText = errors[field];\n  const hasError = typeof errorText !== 'undefined';\n\n  let cssClass = 'form-control form-control-lg';\n  if (hasError) cssClass += ' is-invalid';\n\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={field}>{label}</label>\n      <Text\n        className={cssClass}\n        autoComplete=\"off\"\n        field={field}\n        id={field}\n        validate={validate}\n        disabled={disabled}\n        validateOnBlur\n      />\n      {hasError\n        ? <div className=\"invalid-feedback\">{errorText}</div>\n        : null\n      }\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  disabled: PropTypes.bool,\n  field: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  validate: PropTypes.func,\n};\n\nTextInput.defaultProps = {\n  disabled: false,\n};\n\nexport default withFormState(TextInput);\n","import React, { useEffect } from 'react';\nimport { Form } from 'informed';\nimport TextInput, { requiredValidator } from '../TextInput';\n\nconst Password = ({ onSubmit }) => {\n  useEffect(() => {\n    const firstInput = document.querySelector('input:not([style=\"display: none;\"]').focus();\n    firstInput && firstInput.focus();\n  });\n\n  return (\n    <div className=\"container\">\n      <Form id=\"password-form\" onSubmit={onSubmit}>\n        <input autoComplete=\"false\" name=\"hidden\" type=\"text\" style={{ display: 'none' }} />\n        <TextInput\n          field=\"password\"\n          label=\"Enter your secret password.\"\n          validate={requiredValidator}\n        />\n        <div className=\"btn-group\">\n          <button className=\"btn btn-primary btn-branded\" type=\"submit\">Submit</button>\n        </div>\n        <div className=\"btn-group\">\n          <button className=\"btn btn-light\" type=\"reset\">Reset</button>\n        </div>\n      </Form>\n    </div>\n\n  );\n};\n\nexport default Password;\n","import { connect } from 'react-redux';\n\nimport Password from './Password';\nimport { setPassword } from '../../store/password';\n\nconst mapState = () => ({});\nconst mapDispatch = ({\n  onSubmit: setPassword,\n});\n\nexport default connect(mapState, mapDispatch)(Password);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './Success.css';\n\nconst Success = ({ selfDestruct }) => {\n  const [remaining, setRemaining] = useState(3);\n\n  useEffect(() => {\n    const countdown = () => {\n      const newRemaining = remaining - 1;\n      if (newRemaining === 0) {\n        selfDestruct();\n      } else {\n        setRemaining(newRemaining);\n        setTimeout(countdown, 1000);\n      }\n    }\n    setTimeout(countdown, 1000);\n  })\n\n  return (\n    <div className=\"alert alert-success alert-signin\">\n      <h3>Sign In Saved</h3>\n      This message will self-destruct in {remaining}...\n    </div>\n  );\n};\n\nSuccess.propTypes = {\n  selfDestruct: PropTypes.func.isRequired,\n}\n\nexport default Success;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'informed';\nimport Success from './Success';\nimport TextInput, { requiredValidator } from '../TextInput';\n\n\nclass SignInForm extends React.Component {\n  componentDidMount() {\n    const firstInput = document.querySelector('input:not([style=\"display: none;\"]').focus();\n    firstInput && firstInput.focus();\n  }\n\n  render() {\n    const { onSubmit, clearSuccess, displaySuccess } = this.props;\n    return (\n      <div className=\"container\">\n        <Form id=\"signin-form\" onSubmit={onSubmit}>\n          {displaySuccess && <Success selfDestruct={clearSuccess} />}\n          <input autoComplete=\"false\" name=\"hidden\" type=\"text\" style={{ display: 'none' }} />\n          <TextInput\n            field=\"firstName\"\n            label=\"First Name\"\n            validate={requiredValidator}\n          />\n          <TextInput\n            field=\"lastName\"\n            label=\"Last Name\"\n            validate={requiredValidator}\n          />\n          <TextInput\n            field=\"emailAddress\"\n            label=\"Email Address\"\n            validate={requiredValidator}\n          />\n          <TextInput\n            field=\"phoneNumber\"\n            label=\"Phone Number\"\n          />\n          <div className=\"btn-group\">\n            <button className=\"btn btn-danger btn-branded\" type=\"submit\">Submit</button>\n          </div>\n          <div className=\"btn-group\">\n            <button className=\"btn btn-light\" type=\"reset\">Reset</button>\n          </div>\n        </Form>\n      </div>\n    );\n  }\n}\n\nSignInForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  displaySuccess: PropTypes.bool.isRequired,\n  clearSuccess: PropTypes.func.isRequired,\n};\n\nexport default SignInForm;\n","import { connect } from 'react-redux';\n\nimport SignInForm from './SignInForm';\nimport { logSignIn, clearSuccess } from '../../store/signin';\n\nconst mapState = (state) => ({\n  displaySuccess: state.getIn(['signin', 'displaySuccess'], false),\n});\nconst mapDispatch = ({\n  onSubmit: logSignIn,\n  clearSuccess,\n});\n\nexport default connect(mapState, mapDispatch)(SignInForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport EventList from '../EventList';\nimport EventListWithSignIns from '../EventList/index-reports'\nimport Loading from '../Loading';\nimport Password from '../Password';\nimport SignInForm from '../SignInForm';\n\nconst Container = ({ hasEvent, hasPassword, isLoading, shouldShowReports }) => {\n  if (isLoading) return <Loading />;\n  if (!hasPassword) return <Password />;\n  if (hasEvent) return <SignInForm />;\n  if (shouldShowReports) return <EventListWithSignIns />;\n  return <EventList />;\n};\nContainer.propTypes = {\n  hasEvent: PropTypes.bool,\n  hasPassword: PropTypes.bool,\n  shouldShowReports: PropTypes.bool,\n  isLoading: PropTypes.bool,\n};\n\nconst mapStateToProps = (state) => {\n  const isLoading = state.getIn(['loading', 'isLoading']);\n\n  const event = state.getIn(['setup', 'selectedEvent']);\n  const hasEvent = typeof event !== 'undefined';\n  const hasPassword = !!state.get('password');\n  const shouldShowReports = state.getIn(['setup', 'showReports'], false);\n\n  return { hasEvent, hasPassword, shouldShowReports, isLoading };\n};\n\nexport default connect(mapStateToProps)(Container);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport Layout from './components/Layout';\nimport Container from './components/Container';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Layout>\n        <Container />\n      </Layout>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}